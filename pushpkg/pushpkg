#!/usr/bin/python3

import argparse
import os
import subprocess
import sys


def main():
    parser = argparse.ArgumentParser(
        description="pushpkg, push aosc package to repo.aosc.io"
    )
    parser.add_argument(
        "username", metavar="USERNAME", type=str, help="Your LDAP username.", nargs="?"
    )
    parser.add_argument(
        "branch",
        metavar="BRANCH",
        type=str,
        help="AOSC OS update branch (stable, stable-proposed, testing, etc.)",
        nargs="?",
    )
    parser.add_argument(
        "component",
        metavar="COMPONENT",
        type=str,
        help="(Optional) Repository component (main, bsp-sunxi, etc.) "
        'Falls back to "main" if not specified.',
        nargs="?",
        default="main",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Enable verbose logging for ssh and rsync",
    )
    parser.add_argument(
        "-d",
        "--delete",
        action="store_true",
        help="Clean OUTPUT directory after finishing uploading.",
    )
    parser.add_argument(
        "-f",
        "--force-push-noarch-package",
        action="store_true",
        help="Force Push noarch package.",
    )
    parser.add_argument(
        "-r", "--retro", action="store_true", help="Push to AOSC OS/Retro repo"
    )
    parser.add_argument(
        "-i", "--identity-file", type=str, help="SSH identity file", default=None
    )
    args = parser.parse_args()
    username = args.username
    branch = args.branch
    component = args.component
    if not username:
        username = detect_and_ask(
            "username",
            os.environ.get("PUSHPKG_USERNAME")
            or subprocess.check_output(["whoami"], shell=True).strip().decode(),
        )
    if not branch:
        branch = detect_and_ask(
            "branch", os.path.split(os.getcwd())[1].lstrip("OUTPUT-")
        )
    if not os.path.isdir("./debs"):
        print("[!!!] debs is not a directory!")
        sys.exit(1)
    delete_junk()
    upload_url = make_upload_url(username, branch, component, args.retro)
    rsync_non_noarch_file(upload_url, args.identity_file, args.verbose)
    if have_noarch_files():
        rsync_noarch_file(upload_url, args.identity_file, args.verbose, args.force_push_noarch_package)
    else:
        print("[+] There is no noarch packages. Skipping.")
    if args.delete:
        clean_output_directory()
    mark_upload_done(username, args.identity_file, args.verbose)


def detect_and_ask(type_name: str, arg: str) -> str:
    choice = input(f"[+] Detected {type_name} {arg}. Use this one? [Y/n] ").lower()

    if choice == "n":
        return input(f"[+] Please fill in the {type_name}: ")
    if choice in ("y", ""):
        return arg

    print("[!!!] Unexpected response!")
    return detect_and_ask(type_name, arg)


def make_upload_url(username: str, branch: str, component: str, is_retro: bool) -> str:
    return f"{username}@repo.aosc.io:/mirror/debs{'-retro' if is_retro else ''}/pool/{branch}/{component}/"


def delete_junk():
    print("[+] Removing loose files ...")
    debs_path = os.path.abspath("./debs")
    command = [
        "sudo",
        "find",
        debs_path,
        "-maxdepth",
        "1",
        "-type",
        "f",
        "-delete",
        "-print",
    ]
    subprocess.check_call(command)


def mark_upload_done(username: str, identity_file=None, verbose=False):
    command = ["ssh", f"{username}@repo.aosc.io", "touch", "/mirror/.updated"]
    if verbose:
        command.insert(1, "-v")
    if identity_file:
        command.insert(1, "-i")
        command.insert(2, identity_file)
    subprocess.check_call(command)


def rsync_non_noarch_file(upload_url: str, identity_file=None, verbose=False):
    print("[+] Uploading arch-specific packages ...")
    command = [
        "rsync",
        "-rlOvhzPe",
        "ssh",
        "--mkpath",
        "--exclude",
        "*_noarch.deb",
        "./debs/",
        upload_url,
    ]
    if verbose:
        command.insert(1, "-v")
    if identity_file:
        command[2] = f"ssh -i {identity_file}"
    subprocess.check_call(command)


def have_noarch_files() -> bool:
    output = subprocess.check_output(["find", "./debs", "-name", "*_noarch.deb"])
    return len(output) > 1


def rsync_noarch_file(upload_url: str, identity_file=None, verbose=False, force_push_noarch_package=False):
    print("[+] Uploading noarch packages ...")
    command = [
        "rsync",
        "--ignore-existing",
        "-rlOvhzPe",
        "ssh",
        "--include",
        "*_noarch.deb",
        "./debs/",
        upload_url,
    ]
    if identity_file:
        command[3] = f"ssh -i {identity_file}"
    if force_push_noarch_package:
        del command[1]
    if verbose:
        command.insert(1, "-v")
    subprocess.check_call(command)


def clean_output_directory():
    print("[+] Cleaning debs ...")
    debs_path = os.path.abspath("./debs")
    subprocess.check_call(["sudo", "rm", "-rv", debs_path])


if __name__ == "__main__":
    main()
