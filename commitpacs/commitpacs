#!/usr/bin/bash
# SPDX-License-Identifier: GPL-3.0
set -Eeuo pipefail
trap 'errorHandler "$?" "${FUNCNAME[0]}" "$LINENO"' ERR

error() {
    echo -e "\e[0;31m[ERROR] $*\e[0m" >&2
}

die() {
    error "$*"
    exit 1
}

log() {
    echo -e "\e[0;32m$*\e[0m" >&2
}

errorHandler() {
    echo -e "\e[0;31m[BUG] Line $3 ($2): $1\e[0m" >&2
    exit "$1"
}

getPkgDir() {
    local path
    path="$(find . -mindepth 2 -maxdepth 2 -type d -name "$1" -print -quit)"
    echo "${path#./}"
}

getPkgVer() {
    (
        # shellcheck source=/dev/null
        source "$1"/spec
        echo "$VER"
    )
}

commitPkg() {
    local pkg="$1"
    local pkgDir pkgVer
    pkgDir="$(getPkgDir "$pkg")"
    pkgVer="$(getPkgVer "$pkgDir")"

    if [[ "${BUMPREL:-}" == 1 ]]; then
        log "[$pkg] Bumping REL ..."
        "$(dirname "$(dirname "$(realpath "$(command -v "$0")")")")/bump-rel/bump-rel" \
            "$pkgDir/spec"
    fi

    local message
    message="$pkg: ${commitTemplate}"
    message="${message//\{PKGNAME\}/${pkg}}"
    message="${message//\{PKGVER\}/${pkgVer}}"

    log "[$pkg] $message"
    git add "$pkgDir"
    git commit -m "$message" -- "$pkgDir"

    local commitLog
    commitLog="$(git -c core.abbrev=16 \
        log HEAD \
        --oneline -1 --no-decorate --color=always)"
    log "[$pkg] $commitLog"

    log "[$pkg] SUCCESS!"
}

if [[ $# == 0 ]]; then
    cat <<EOF
Usage: $0 <MESSAGE> [PACKAGES]...

Commit many packages with a message.
When packages is not set, all changed packages are committed.

Possible environment variables:
    BUMPREL: Set to 1 to bump REL before committing
EOF
    exit
fi

declare commitTemplate
case "$1" in
n | new)
    # shellcheck disable=SC2016
    commitTemplate='new, {PKGVER}'
    ;;
u | upd | update)
    # shellcheck disable=SC2016
    commitTemplate='update to {PKGVER}'
    ;;
*)
    commitTemplate="$1"
    ;;
esac
shift

commitTemplate="${commitTemplate#\?\: }"

declare -a pkgs
if [[ $# == 0 ]]; then
    readarray -t pkgs < <(git status --porcelain | cut -d' ' -f 3 | cut -d'/' -f2 | sort | uniq)
else
    pkgs=("$@")
fi

for pkg in "${pkgs[@]}"; do
    if ! commitPkg "$pkg"; then
        error "[$pkg] FAILED"
    fi
done
