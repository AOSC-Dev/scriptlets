#!/usr/bin/bash
# SPDX-License-Identifier: GPL-3.0
# Author: xtex <xtex@xtexx.eu.org>

set -Eeuo pipefail
trap 'errorHandler "$?" "${FUNCNAME[0]}" "$LINENO"' ERR

error() {
    echo -e "\e[0;31m[ERROR] $*\e[0m" >&2
}

die() {
    error "$*"
    exit 1
}

log() {
    echo -e "\e[0;32m$*\e[0m" >&2
}

errorHandler() {
    echo -e "\e[0;31m[BUG] Line $3 ($2): $1\e[0m" >&2
    if [[ -e "${remainingUsagesFile:-}" ]]; then
        rm -f "$remainingUsagesFile"
    fi
    exit "$1"
}

showUsage() {
    cat <<EOF
Usage: $0 [OPTIONS] <PACKAGES>...

Options:
    -? --help: Show usage
    -f --force: Drop without considering reverse deps
    -d --withdeps: Also drop all reverse deps
    -m <MESSAGE>: Append a reason to commit message
EOF
    exit
}

declare -a dropWaitingList=()
declare commitMessage="drop"
declare forceDrop="" dropRevDeps=""
declare remainingUsagesFile=""

getPackageSiteJson() {
    curl -SL --retry 3 "https://packages.aosc.io/packages/$1?type=json"
}

getSpecPath() {
    echo "$(getPkgDir "$1")/spec"
}

getPkgDir() {
    local path
    path="$(find . -mindepth 2 -maxdepth 2 -type d -name "$1" -print -quit)"
    echo "${path#./}"
}

getRevDeps() {
    oma rdepends "$1" | (grep -E '    Depends: ([^ ]*) \(' -o || true) | cut -d' ' -f6 |
        (grep -xv "$1-dbg" || true)
}

isGitWorkTreeDirty() {
    [[ "$(git status --porcelain | wc -l)" != 0 ]]
    return
}

removePackageFromGroup() {
    perl -i -pe "s/# revdep: ${1}, /# revdep: /" "$3" || true
    perl -i -pe "s/, ${1}//" "$3" || true

    perl -i -pe "s/${2//\//\\\/}\\n//g" "$3"
}

dropIt() {
    local pkg="$1"
    local -a commitPaths

    local pkgDir
    pkgDir="$(getPkgDir "$pkg")"
    if [[ -z "$pkgDir" ]]; then
        log "[$pkg] Package is already dropped"
        return 0
    fi

    case "$pkg" in *-base) die "[$pkg] Could not be drop because it is a base package" ;; esac

    log "[$pkg] Dropping package: $pkg"

    local -a rdeps
    readarray -t rdeps < <(getRevDeps "$pkg")
    log "[$pkg] Reverse dependencies (${#rdeps[@]}): ${rdeps[*]}"
    if [[ "${#rdeps[@]}" != 0 ]]; then
        if [[ -n "$dropRevDeps" ]]; then
            for rdep in "${rdeps[@]}"; do
                log "[$pkg] Dropping rev dep: $rdep"
                dropIt "$rdep"
            done
            log "[$pkg] Dropped all ${#rdeps[@]} reverse deps"
        elif [[ -n "$forceDrop" ]]; then
            log "[$pkg] Ignoring reverse deps"
        else
            die "[$pkg] Dropping may break reverse dependencies"
        fi
    fi

    log "[$pkg] Removing directory: $pkgDir"
    git rm -rfq "$pkgDir"
    commitPaths+=("$pkgDir")

    local -a groupsWithPkg
    readarray -t groupsWithPkg < <((grep -rHE "^$pkgDir$" groups/ || true) | cut -d':' -f1)
    for group in "${groupsWithPkg[@]}"; do
        log "[$pkg] Removing from $group"
        removePackageFromGroup "$pkg" "$pkgDir" "$group"
        git add "$group"
        commitPaths+=("$group")
    done

    log "[$pkg] Committing ..."
    git commit -m "$pkg: $commitMessage" \
        --trailer X-AOSC-dropit-package="$pkg" \
        --trailer X-AOSC-dropit-directory="$pkgDir" \
        -- "${commitPaths[@]}"

    local commitLog
    commitLog="$(git -c core.abbrev=16 \
        log HEAD \
        --oneline -1 --no-decorate --color=always)"
    log "[$pkg] $commitLog"

    log "[$pkg] Collecting remaining uses ..."
    rg "$pkg" \
        -g !groups/ \
        --color=always \
        -m8 -M60 --column --heading >>"$remainingUsagesFile"

    log "[$pkg] SUCCESS!"
}

while [ $# -ne 0 ]; do
    case $1 in
    -\? | --help)
        showUsage
        ;;
    -f | --force)
        forceDrop=true
        ;;
    -d | --withdeps)
        dropRevDeps=true
        ;;
    -m)
        commitMessage+=", $2"
        shift
        ;;
    *)
        dropWaitingList+=("$1")
        ;;
    esac
    shift
done

[[ "${#dropWaitingList[@]}" != 0 ]] || die "No packages to drop"

remainingUsagesFile="$(mktemp --suffix=.txt --tmpdir dropit.remusg.XXX)"

for pkg in "${dropWaitingList[@]}"; do
    if ! dropIt "$pkg"; then
        error "[$pkg] FAILED"
    fi
done

log "[*] To show remaining references: cat $remainingUsagesFile"
