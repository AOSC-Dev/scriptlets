#!/usr/bin/bash
# SPDX-License-Identifier: GPL-3.0
# Author: xtex <xtex@xtexx.eu.org>
# Contributor: Kaiyang Wu <origincode@aosc.io>

set -Eeuo pipefail
trap 'errorHandler "$?" "${FUNCNAME[0]}" "$LINENO"' ERR

error() {
    echo -e "\e[0;31m[ERROR] $*\e[0m" >&2
}

die() {
    error "$*"
    exit 1
}

log() {
    echo -e "\e[0;32m$*\e[0m" >&2
}

errorHandler() {
    echo -e "\e[0;31m[BUG] Line $3 ($2): $1\e[0m" >&2
    if [[ -e "${remainingUsagesFile:-}" ]]; then
        rm -f "$remainingUsagesFile"
    fi
    exit "$1"
}

showUsage() {
    cat <<EOF
Usage: $0 [OPTIONS] <PACKAGES>...

Options:
    -? --help: Show usage
    -f --force: Drop without considering reverse deps
    --force-all: Kill the world (implies --force)
    -d --rdeps: Also drop all reverse deps
    -p --prune: Also drop all reverse deps and prune the dependency tree (implies --rdeps --pkg-prune)
    --pkg-prune: Use pkg-prune.rkt to query deps
    -o --oma: Use oma to query deps (implies --pkg-prune)
    -r: Collect remaining usages of dropped packages
    -m <MESSAGE>: Append a reason to commit message
EOF
    exit
}

declare -a dropWaitingList=()
declare commitMessage="drop"
declare forceDrop="" forceAll=""
declare dropRevDeps="" dropNewOrphans=""
declare usePkgPrune="" useOma=""
declare collectRemainingUsages=""

getSpecPath() {
    echo "$(getPkgDir "$1")/spec"
}

getPkgDir() {
    local path
    path="$(find . -mindepth 2 -maxdepth 2 -type d -name "$1" -print -quit)"
    echo "${path#./}"
}

getRevDeps() {
    if [[ -n "$usePkgPrune" ]]; then
        if [[ -n "$useOma" ]]; then
            "$pkgPrunePath" -ro "$1"
        else
            "$pkgPrunePath" -r "$1"
        fi
    else
        oma rdepends "$1" --json | jq -r '(.rdeps["Depends"] // []) | flatten | map(select(.name | endswith("-dbg") | not)) 
            | map(.name) | sort | unique | .[]'
    fi
}

getPruningPackages() {
    if [[ -n "$usePkgPrune" ]]; then
        if [[ -n "$useOma" ]]; then
            "$pkgPrunePath" -o "$1"
        else
            "$pkgPrunePath" "$1"
        fi
    else
        die "oma does not support collecting orphan packages"
    fi
}

isGitWorkTreeDirty() {
    [[ "$(git status --porcelain | wc -l)" != 0 ]]
    return
}

removePackageFromGroup() {
    perl -i -pe "s/# revdep: ${1}, /# revdep: /" "$3" || true
    perl -i -pe "s/, ${1}//" "$3" || true

    perl -i -pe "s/${2//\//\\\/}\\n//g" "$3"
}

dropIt() {
    local pkg="$1"

    local pkgDir
    pkgDir="$(getPkgDir "$pkg")"
    if [[ -z "$pkgDir" ]]; then
        log "[$pkg] Package is already dropped"
        return 0
    fi

    if [[ -n "$dropNewOrphans" ]]; then
        local -a packageList
        readarray -t packageList < <(getPruningPackages "$pkg")
        log "[$pkg] Packages to drop (${#packageList[@]}): ${packageList[*]}"
        for pkg in "${packageList[@]}"; do
            log "[$pkg] Dropping package: $pkg"
            dropPkg "$pkg"
        done
        log "[$pkg] Dropped ${#packageList[@]} packages"
    else
        local -a rdeps
        readarray -t rdeps < <(getRevDeps "$pkg")
        if [[ -n "$usePkgPrune" ]]; then
            local rdepsCount="${#rdeps[@]}"
            rdepsCount="$((rdepsCount - 1))"
            log "[$pkg] Packages to be dropped ($rdepsCount reverse deps): ${rdeps[*]}"
            if [[ "$rdepsCount" != 0 ]]; then
                if [[ -n "$dropRevDeps" ]]; then
                    for rdep in "${rdeps[@]}"; do
                        [[ "$rdep" != "$pkg" ]] || continue
                        log "[$pkg] Dropping reverse dep: $rdep"
                        dropPkg "$rdep"
                    done
                    log "[$pkg] Dropped $rdepsCount reverse deps"
                elif [[ -n "$forceDrop" ]]; then
                    log "[$pkg] Ignoring reverse deps"
                else
                    die "[$pkg] Dropping may break reverse dependencies"
                fi
            fi
        else
            log "[$pkg] Reverse dependencies (${#rdeps[@]}): ${rdeps[*]}"
            if [[ "${#rdeps[@]}" != 0 ]]; then
                if [[ -n "$dropRevDeps" ]]; then
                    for rdep in "${rdeps[@]}"; do
                        log "[$pkg] Dropping rev dep: $rdep"
                        dropIt "$rdep"
                    done
                    log "[$pkg] Dropped ${#rdeps[@]} reverse deps"
                elif [[ -n "$forceDrop" ]]; then
                    log "[$pkg] Ignoring reverse deps"
                else
                    die "[$pkg] Dropping may break reverse dependencies"
                fi
            fi
        fi
        dropPkg "$pkg"
    fi
}

dropPkg() {
    local pkg="$1"
    local -a commitPaths

    local pkgDir
    pkgDir="$(getPkgDir "$pkg")"
    if [[ -z "$pkgDir" ]]; then
        log "[$pkg] Package is already dropped"
        return 0
    fi

    [[ -n "$forceAll" ]] || case "$pkg" in *-base) die "[$pkg] Could not be drop because it is a base package" ;; esac

    log "[$pkg] Dropping package: $pkg"

    log "[$pkg] Removing directory: $pkgDir"
    git rm -rfq "$pkgDir"
    commitPaths+=("$pkgDir")

    local -a groupsWithPkg
    readarray -t groupsWithPkg < <((grep -rHE "^$pkgDir$" groups/ || true) | cut -d':' -f1)
    for group in "${groupsWithPkg[@]}"; do
        log "[$pkg] Removing from $group"
        removePackageFromGroup "$pkg" "$pkgDir" "$group"
        git add "$group"
        commitPaths+=("$group")
    done

    log "[$pkg] Committing ..."
    git commit -m "$pkg: $commitMessage" \
        --trailer X-AOSC-dropit-package="$pkg" \
        --trailer X-AOSC-dropit-directory="$pkgDir" \
        -- "${commitPaths[@]}"

    local commitLog
    commitLog="$(git -c core.abbrev=16 \
        log HEAD \
        --oneline -1 --no-decorate --color=always)"
    log "[$pkg] $commitLog"

    if [[ -n "$collectRemainingUsages" ]]; then
        log "[$pkg] Collecting remaining usages ..."
        rg "$pkg" \
            -g !groups/ \
            --color=always \
            -m8 -M60 --column --heading >>"$remainingUsagesFile"
    fi

    log "[$pkg] SUCCESS!"
}

while [ $# -ne 0 ]; do
    case $1 in
    -\? | --help)
        showUsage
        ;;
    -f | --force)
        forceDrop=true
        ;;
    --force-all)
        forceDrop=true
        forceAll=true
        ;;
    -d | --rdeps)
        dropRevDeps=true
        ;;
    -p | --prune)
        dropRevDeps=true
        usePkgPrune=true
        dropNewOrphans=true
        ;;
    --pkg-prune)
        usePkgPrune=true
        ;;
    -o | --oma)
        usePkgPrune=true
        useOma=true
        ;;
    -r)
        collectRemainingUsages=true
        ;;
    -m)
        commitMessage+=", $2"
        shift
        ;;
    *)
        dropWaitingList+=("$1")
        ;;
    esac
    shift
done

[[ "${#dropWaitingList[@]}" != 0 ]] || die "No packages to drop"

if isGitWorkTreeDirty; then
    die "Git working tree is dirty"
fi

if [[ -n "$collectRemainingUsages" ]]; then
    declare remainingUsagesFile
    remainingUsagesFile="$(mktemp --suffix=.txt --tmpdir dropit.remusg.XXX)"
fi

if [[ -n "$usePkgPrune" ]]; then
    declare pkgPrunePath
    pkgPrunePath="$(dirname "$(realpath "$0")")/../pkg-prune.rkt"
    command -v racket &>/dev/null || die "racket is not installed"
    log "[*] Found pkg-prune.rkt: $pkgPrunePath"
fi

for pkg in "${dropWaitingList[@]}"; do
    if ! dropIt "$pkg"; then
        error "[$pkg] FAILED"
    fi
done

if [[ -n "$collectRemainingUsages" ]]; then
    log "[*] To show remaining references: cat $remainingUsagesFile"
fi
